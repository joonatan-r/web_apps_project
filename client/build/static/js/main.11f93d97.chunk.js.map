{"version":3,"sources":["apiCalls.js","App.js","reportWebVitals.js","index.js"],"names":["getPosts","callback","fetch","window","location","href","credentials","then","res","json","createPostElements","list","elems","map","post","idx","className","user","formatDate","time","text","length","dateString","date","Date","hours","getHours","minutes","getMinutes","toPadString","getDate","getMonth","getFullYear","n","App","useState","enteringCredentials","setEnteringCredentials","makingPost","setMakingPost","loggedUser","setLoggedUser","usernameInput","setUsernameInput","passwordInput","setPasswordInput","userFilter","setUserFilter","postText","setPostText","posts","setPosts","users","setUsers","displayedUsers","setDisplayedUsers","postsOfUser","setPostsOfUser","useEffect","loggedIn","username","getUsers","document","body","style","overflowY","filter","toLowerCase","includes","onClick","method","headers","JSON","stringify","placeholder","value","onChange","e","target","type","password","alert","rows","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.11f93d97.chunk.js","sourcesContent":["export function createAccount(username, password, callback) {\r\n    fetch(window.location.href + \"createAccount\", {\r\n        method: 'POST',\r\n        credentials: \"include\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            username: username,\r\n            password: password\r\n        })\r\n    })\r\n        .then(res => res.text())\r\n        .then(res => {\r\n            if (res === \"invalid\") {\r\n                alert(\"Invalid information\");\r\n            } else if (res === \"username taken\") {\r\n                alert(\"Username is already taken\");\r\n            } else if (res === \"createAccount\") {\r\n                callback(username);\r\n            }\r\n        });\r\n}\r\n\r\nexport function login(username, password, callback) {\r\n    fetch(window.location.href + \"login\", {\r\n        method: 'POST',\r\n        credentials: \"include\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            username: username,\r\n            password: password\r\n        })\r\n    })\r\n        .then(res => res.text())\r\n        .then(res => {\r\n            if (res !== \"login\") {\r\n                alert(\"Login failed\");\r\n            } else {\r\n                callback(username);\r\n            }\r\n        });\r\n}\r\n\r\nexport function logout(callback) {\r\n    fetch(window.location.href + \"logout\", { credentials: \"include\" })\r\n        .then(res => res.text())\r\n        .then(res => {\r\n            if (res !== \"logout\") {\r\n                alert(\"Something went wrong\");\r\n            } else {\r\n                callback(null);\r\n            }\r\n        });\r\n}\r\n\r\nexport function checkLogin(callback) {\r\n    fetch(window.location.href + \"checkLogin\", { credentials: \"include\" })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if (res.loggedIn !== \"yes\") {\r\n                callback(null);\r\n            } else {\r\n                callback(res.username);\r\n            }\r\n        });\r\n}\r\n\r\nexport function post(text, callback) {\r\n    if (text.length > 300) {\r\n        alert(\"Post is too long! Limit the length to 300 characters\");\r\n        return;\r\n    }\r\n    fetch(window.location.href + \"newPost\", {\r\n        method: 'POST',\r\n        credentials: \"include\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            text: text\r\n        })\r\n    })\r\n        .then(res => res.text())\r\n        .then(res => {\r\n            if (res !== \"newPost\") {\r\n                alert(\"Something went wrong\");\r\n            } else {\r\n                callback(\"\");\r\n            }\r\n        });\r\n}\r\n\r\nexport function getPosts(callback) {\r\n    fetch(window.location.href + \"posts\", { credentials: \"include\" })\r\n        .then(res => res.json())\r\n        .then(res => createPostElements(res))\r\n        .then(res => callback(res));\r\n}\r\n\r\nexport function getPostsForUser(user, callback) {\r\n    fetch(window.location.href + \"posts\", {\r\n        method: 'POST',\r\n        credentials: \"include\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            user: user\r\n        })\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => createPostElements(res))\r\n        .then(res => callback(res));\r\n}\r\n\r\nexport function getUsers(callback) {\r\n    fetch(window.location.href + \"users\", { credentials: \"include\" })\r\n        .then(res => res.json())\r\n        .then(res => callback(res));\r\n}\r\n\r\nfunction createPostElements(list) {\r\n    const elems = list.map((post, idx) => \r\n        <div key={idx} className=\"post\">\r\n            <div className=\"post-info\">\r\n                <p>{post.user}</p>\r\n                <p>{formatDate(post.time)}</p>\r\n            </div>\r\n            <div className=\"post-content\">\r\n                <p>{post.text}</p>\r\n            </div>\r\n        </div>    \r\n    );\r\n\r\n    if (!elems.length) {\r\n        return [(\r\n            <div key={0} className=\"post\">\r\n                <div className=\"post-content\">\r\n                    <p>No posts</p>\r\n                </div>\r\n            </div> \r\n        )];\r\n    }\r\n    return elems;\r\n}\r\n\r\nfunction formatDate(dateString) {\r\n    const date = new Date(dateString);\r\n    let hours = date.getHours();\r\n    let minutes = date.getMinutes();\r\n    return toPadString(hours) + \":\" + toPadString(minutes) + \"\\n\"\r\n            + date.getDate() + \".\" + (date.getMonth()+1) + \".\"\r\n            + date.getFullYear();\r\n}\r\n\r\nfunction toPadString(n) {\r\n    if (n < 9) return \"0\" + n;\r\n    return \"\" + n;\r\n}\r\n","import './App.css';\nimport { useEffect, useState } from 'react';\nimport { \n    createAccount, \n    login, \n    logout, \n    checkLogin, \n    post, \n    getPosts, \n    getPostsForUser, \n    getUsers \n} from './apiCalls';\n\nfunction App() {\n    const [enteringCredentials, setEnteringCredentials] = useState(false);\n    const [makingPost, setMakingPost] = useState(false);\n    const [loggedUser, setLoggedUser] = useState(null);\n    const [usernameInput, setUsernameInput] = useState(\"\");\n    const [passwordInput, setPasswordInput] = useState(\"\");\n    const [userFilter, setUserFilter] = useState(\"\");\n    const [postText, setPostText] = useState(\"\");\n    const [posts, setPosts] = useState([]);\n    const [users, setUsers] = useState([]);\n    const [displayedUsers, setDisplayedUsers] = useState([]);\n    const [postsOfUser, setPostsOfUser] = useState(null);\n\n    useEffect(() => {\n        checkLogin(setLoggedUser);\n        getPosts(setPosts);\n        getUsers(setUsers);\n    }, []);\n    useEffect(() => {\n        if (loggedUser) {\n            setUsernameInput(\"\");\n            setPasswordInput(\"\");\n            setEnteringCredentials(false);\n        }\n    }, [loggedUser]);\n    useEffect(() => {\n        if (enteringCredentials || makingPost) {\n            document.body.style.overflowY = \"hidden\";\n        } else {\n            document.body.style.overflowY = \"scroll\";\n        }\n    }, [enteringCredentials, makingPost]);\n    useEffect(() => {\n        setDisplayedUsers(users.filter(user => {\n                if (user.toLowerCase().includes(userFilter.toLowerCase())) return true;\n                return false;\n            })\n            .map((user, idx) => \n                <div \n                    key={idx} \n                    onClick={() => {\n                        if (postsOfUser === user) {\n                            setPostsOfUser(null);\n                        } else {\n                            setPostsOfUser(user);\n                        }\n                    }}\n                    className={(postsOfUser === user && \"selected user\") || \"user\"}\n                >\n                    <p>{user}</p>\n                </div>    \n            ));\n    }, [users, userFilter, postsOfUser]);\n    useEffect(() => {\n        if (!postsOfUser) {\n            getPosts(setPosts);\n        } else {\n            getPostsForUser(postsOfUser, setPosts);\n        }\n    }, [postsOfUser]);\n\n    return (\n        <div className=\"App\">\n            {enteringCredentials &&\n            <div className=\"enterCredentials\">\n                <div className=\"inputs\">\n                    <input \n                        placeholder=\"Username\"\n                        value={usernameInput} \n                        onChange={e => setUsernameInput(e.target.value)}\n                    >\n                    </input>\n                    <input \n                        placeholder=\"Password\"\n                        type=\"password\"\n                        value={passwordInput} \n                        onChange={e => setPasswordInput(e.target.value)}\n                    >\n                    </input>\n                </div>\n                <div className=\"btns\">\n                    <button onClick={() => {\n                        createAccount(usernameInput, passwordInput, setLoggedUser);\n                    }}>\n                        Create Account\n                    </button> \n                    <button onClick={() => {\n                        login(usernameInput, passwordInput, setLoggedUser);\n                    }}>\n                        Log In\n                    </button>\n                    <button onClick={() => {\n                        setUsernameInput(\"\");\n                        setPasswordInput(\"\");\n                        setEnteringCredentials(false);\n                    }}>\n                        Cancel\n                    </button>\n                </div>\n            </div>\n            }\n            {!loggedUser && !enteringCredentials && \n            <div className=\"notLoggedHeader\">\n                <button onClick={() => setEnteringCredentials(true)}>\n                    Log in or create account\n                </button>\n            </div>\n            }\n            {loggedUser && \n            <div className=\"loggedHeader\">\n                {!makingPost &&\n                <button onClick={() => setMakingPost(true)}>\n                    Make new post\n                </button>\n                }\n                {!makingPost &&\n                <button onClick={() => logout(setLoggedUser)}>\n                    Log out\n                </button>\n                }\n                <p>Logged in as {loggedUser}</p>\n            </div>\n            }\n            {makingPost &&\n            <div className=\"makePost\">\n                <textarea rows={10} value={postText} onChange={e => setPostText(e.target.value)}>\n                </textarea>\n                <div className=\"btns\">\n                    <button onClick={() => {\n                        post(postText, setPostText);\n                        setMakingPost(false);\n                    }}>\n                        Post\n                    </button>\n                    <button onClick={() => {\n                        setMakingPost(false);\n                        setPostText(\"\");\n                    }}>\n                        Cancel\n                    </button>\n                </div>\n            </div>\n            }\n            <div className=\"main-container\">\n                <div className=\"user-container\">\n                    <h1>Users</h1>\n                    <input \n                        placeholder=\"Search\" \n                        value={userFilter} \n                        onChange={e => setUserFilter(e.target.value)}\n                        className=\"searchInput\"\n                    >\n                    </input>\n                    <div className=\"centered\">\n                        {displayedUsers}\n                    </div>\n                </div>\n                <div className=\"post-container\">\n                    <div className=\"centered\">\n                        <h1>\n                            Showing: {postsOfUser || \"All posts\"}\n                        </h1>\n                        <div className=\"centered\">\n                            {posts}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}